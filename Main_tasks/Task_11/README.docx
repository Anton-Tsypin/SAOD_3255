Задание 11. Вариант 4.

Регулярные выражения в C++.

Для использования regular expressions в C++ нужно подключить модуль <regex>.

1) Создайте регулярное выражение, которое выберет слова только с латинскими буквами и цифрами.
Например, подробное выражение "/[a-zA-Z0-9]+/"

2) Создайте регулярное выражение, которое выберет слова, имеющие хотя бы одну латинскую букву.
Например, /[a-zA-Zа-яА-Я0-9]*[a-zA-Z]+[a-zA-Zа-яА-Я0-9]*/

3) \w* - 0 или больше латинских букв или цифр или нижних подчёркиваний
   \W* - 0 или больше всех символов кроме \w
   \w+ - 1 или больше символов \w
   \W+ - 1 или больше символов \W

4) Регулярное выражение [^<>]* означает: любое количество от 0 до бесконечности любых символов кроме < и >

5) Для того, чтобы сделать именованную группу, нужно в круглых скобках указать (?<group_name>...)

Я использовал множество регулярных выражений для выполнения задания,  
но все они были простыми, например, regex(R"(GO)") ищет и убирает все вхождения GO в файле,
или regex(R"(IDENTITY\(1,1\))") ищет все вхождения IDENTITY(1, 1) и заменяет на AUTO_INCEMENT.
regex(R"(\[\w+\]\.)") ищет и удаляет […].
regex(R"(UNIQUE)") ищет и заменяет UNIQUE на UNIQUE KEY

В ходе решения задачи определил нужные регулярные выражения, в основном простые для удаления каких-то подстрок или замены их на другие. Написал функцию на C++, принимающую на вход регулярное выражение и строку, на которую должна быть произведена замена, по умолчанию равную пустой строке. Далее поочерёдно вызывал эту функцию для всех необходимых регулярных выражений. Всего получилось 20 выражений, и соответственно, 20 вызовов функции.
